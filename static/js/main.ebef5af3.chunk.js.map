{"version":3,"sources":["Components/Recipes.js","Components/Default.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","React","memo","recipe","className","src","image","alt","label","calories","ingredientLines","map","ingredient","index","key","Recipes","recipes","Default","searchInNav","query","setQuery","search","type","placeholder","onChange","e","target","value","onClick","Navbar","App","props","useState","setRecipes","setSearchInNav","useEffect","length","trim","fetch","then","response","json","data","hits","alert","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ebef5af3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipe = React.memo(({ recipe }) => {\r\n  return (\r\n    <div className=\"col-sm-4 col-md-4 my-5\">\r\n      <div className=\"card h-100\">\r\n        <img className=\"card-img-top responsive\" src={recipe.image} alt='recipe' />\r\n        <div className=\"card-body\">\r\n          <h2 className=\"card-title\">{recipe.label}</h2>\r\n          <h6>Calories:{recipe.calories}</h6>\r\n          <ul className=\"card-text\">{recipe.ingredientLines.map((ingredient, index) => <li key={index}>{ingredient}</li>)}</ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n})\r\n\r\nconst Recipes = React.memo(({ recipes }) => {\r\n  return (\r\n    <>\r\n      <h1>Recipes found are</h1>\r\n      <div className='row'>\r\n        {recipes.map((recipe, index) => <Recipe key={index} recipe={recipe.recipe} />)}\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default Recipes;","import React from 'react';\r\n\r\nconst Default = React.memo(({ searchInNav, query, setQuery, search }) => {\r\n  return (\r\n    <>\r\n      {\r\n        !searchInNav &&\r\n        <div className=\"row justify-content-center my-md-5 my-sm-2\">\r\n          <input className=\"form-control form-control-lg form-control-borderless w-50\" type=\"search\" placeholder=\"Search recipe or item\" onChange={e => setQuery(e.target.value)} value={query} />\r\n          <button className=\"btn btn-lg btn-success\" onClick={search}>Search</button>\r\n        </div>\r\n      }\r\n      <div className=\"text-center mx-auto w-responsive w-75\">\r\n        <h1 className=\"h1-responsive\">\r\n          \"One cannot think well, love well, sleep well, if not has not dined well.\"\r\n            </h1>\r\n        <h5 className=\"h5-responsive\">Virginia Woolf</h5>\r\n      </div>\r\n    </>\r\n  );\r\n})\r\n\r\nexport default Default;","import React from 'react';\r\n\r\nconst Navbar = React.memo(({ query, setQuery, searchInNav, search }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light sticky-top\">\r\n      {\r\n        searchInNav && \r\n        <div className=\"form-inline mx-2 w-50\">\r\n          <input className=\"form-control form-control-lg col-md-8 mr-sm-2\" type=\"search\" placeholder=\"Search recipe or item\" onChange={e => setQuery(e.target.value)} value={query} />\r\n          <button className=\"btn btn-lg btn-outline-success\" onClick={search}>Search</button>\r\n        </div>\r\n      }\r\n      <h3 className=\"navbar-brand\">Navbar</h3>\r\n    </nav>\r\n  );\r\n})\r\n\r\nexport default Navbar;","import React, { useState, useEffect } from 'react';\nimport Recipes from './Components/Recipes';\nimport Default from './Components/Default';\nimport Navbar from './Components/Navbar';\n\nconst App = React.memo((props) => {\n\n  const APP_ID = '11250472';\n  const APP_KEY = '6e67cb7a74a3afa5cd25a9ee7840f90e';\n  const [query, setQuery] = useState(\"\");\n  const [recipes, setRecipes] = useState([]);\n  const [searchInNav, setSearchInNav] = useState(false)\n\n  useEffect(() => setSearchInNav(recipes.length !== 0), [recipes]);\n\n  const search = () => {\n    setQuery(query.trim());\n    if (query && query.trim() !== \"\") {\n      fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n        .then(response => response.json())\n        .then(data => { setRecipes(data.hits); if (data.hits.length === 0) alert(`No recipe found`) })\n        .catch(error => alert('Limit exceeded'))\n    } else {\n      alert('No input');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar query={query} setQuery={setQuery} searchInNav={searchInNav} search={search} />\n      <div className=\"container\">\n        {(recipes.length === 0 && <Default setSearchInNav={searchInNav} query={query} setQuery={setQuery} search={search} />) || <Recipes recipes={recipes} />}\n      </div>\n    </div >\n  );\n})\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}